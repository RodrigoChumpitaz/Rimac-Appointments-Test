service: rimac-medical-appointments

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  apiGateway:
    restApiId:
      Ref: ApiGatewayRestApi
    restApiRootResourceId:
      Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    APPOINTMENTS_TABLE: ${self:service}-appointments-${self:provider.stage}
    APPOINTMENTS_TOPIC_ARN: !Ref AppointmentsTopic
    SQS_PE_URL: !Ref AppointmentsSqsPE
    SQS_CL_URL: !Ref AppointmentsSqsCL
    SQS_RESPONSE_URL: !Ref AppointmentsResponseSqs
 
    RDS_HOST_PE: ${env:RDS_HOST_PE, '${env:RDS_HOST, "localhost"}'}
    RDS_DATABASE_PE: ${env:RDS_DATABASE_PE, 'rimac_appointments_pe'}
    RDS_USERNAME_PE: ${env:RDS_USERNAME_PE, '${env:RDS_USERNAME, "admin"}'}
    RDS_PASSWORD_PE: ${env:RDS_PASSWORD_PE, '${env:RDS_PASSWORD, "password"}'}
    RDS_HOST_CL: ${env:RDS_HOST_CL, '${env:RDS_HOST, "localhost"}'}
    RDS_DATABASE_CL: ${env:RDS_DATABASE_CL, 'rimac_appointments_cl'}
    RDS_USERNAME_CL: ${env:RDS_USERNAME_CL, '${env:RDS_USERNAME, "admin"}'}
    RDS_PASSWORD_CL: ${env:RDS_PASSWORD_CL, '${env:RDS_PASSWORD, "password"}'}
    EVENTBRIDGE_NAME: ${self:service}-eventbridge-${self:provider.stage}
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: 
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPOINTMENTS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPOINTMENTS_TABLE}/index/*"
        
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: "arn:aws:sns:${self:provider.region}:*:*"
        
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource: "arn:aws:sqs:${self:provider.region}:*:*"
        
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: "arn:aws:events:${self:provider.region}:*:event-bus/*"
        
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"


custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node18'
    define:
      'require.resolve': undefined
    platform: 'node'
    concurrency: 10

functions:
  appointmentHandler:
    handler: src/handlers/appointment.handler
    timeout: 30
    events:
      - http:
          path: /appointments
          method: post
          cors: true
      - http:
          path: /appointments/{insuredId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                insuredId: true

  appointmentResponseProcessor:
    handler: src/handlers/appointment-response-processor.handler
    timeout: 30
    events:
      - sqs:
          arn: !GetAtt AppointmentsResponseSqs.Arn
          batchSize: 10

  appointmentProcessorPE:
    handler: src/handlers/country-processors/appointment-processor-pe.handler
    timeout: 30
    events:
      - sqs:
          arn: !GetAtt AppointmentsSqsPE.Arn
          batchSize: 5

  appointmentProcessorCL:
    handler: src/handlers/country-processors/appointment-processor-cl.handler
    timeout: 30
    events:
      - sqs:
          arn: !GetAtt AppointmentsSqsCL.Arn
          batchSize: 5

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-api-${self:provider.stage}
        Description: API for RIMAC Medical Appointments
        EndpointConfiguration:
          Types:
            - REGIONAL

    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.APPOINTMENTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: insuredId
            AttributeType: S
          - AttributeName: appointmentId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: insuredId
            KeyType: HASH
          - AttributeName: appointmentId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    AppointmentsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-topic-${self:provider.stage}
        DisplayName: Medical Appointments Topic
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    AppointmentsSqsPE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-sqs-pe-${self:provider.stage}
        VisibilityTimeoutSeconds: 180
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt AppointmentsDeadLetterQueuePE.Arn
          maxReceiveCount: 3
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}
          - Key: Country
            Value: PE

    AppointmentsSqsCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-sqs-cl-${self:provider.stage}
        VisibilityTimeoutSeconds: 180
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt AppointmentsDeadLetterQueueCL.Arn
          maxReceiveCount: 3
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}
          - Key: Country
            Value: CL

    AppointmentsResponseSqs:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-sqs-response-${self:provider.stage}
        VisibilityTimeoutSeconds: 180
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt AppointmentsResponseDeadLetterQueue.Arn
          maxReceiveCount: 3
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    AppointmentsDeadLetterQueuePE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-dlq-pe-${self:provider.stage}
        MessageRetentionPeriod: 1209600

    AppointmentsDeadLetterQueueCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-dlq-cl-${self:provider.stage}
        MessageRetentionPeriod: 1209600

    AppointmentsResponseDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-dlq-response-${self:provider.stage}
        MessageRetentionPeriod: 1209600

    SnsSubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref AppointmentsTopic
        Endpoint: !GetAtt AppointmentsSqsPE.Arn
        FilterPolicy:
          countryISO:
            - "PE"

    SnsSubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref AppointmentsTopic
        Endpoint: !GetAtt AppointmentsSqsCL.Arn
        FilterPolicy:
          countryISO:
            - "CL"

    SqsPolicyPE:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref AppointmentsSqsPE
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt AppointmentsSqsPE.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentsTopic

    SqsPolicyCL:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref AppointmentsSqsCL
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt AppointmentsSqsCL.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentsTopic

    AppointmentCompletedRule:
      Type: AWS::Events::Rule
      Properties:
        Name: ${self:service}-appointment-completed-${self:provider.stage}
        Description: Rule for completed appointments
        EventPattern:
          source:
            - "rimac.appointments"
          detail-type:
            - "Appointment Completed"
        State: ENABLED
        Targets:
          - Arn: !GetAtt AppointmentsResponseSqs.Arn
            Id: "AppointmentResponseSqsTarget"

    EventBridgeToSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref AppointmentsResponseSqs
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt AppointmentsResponseSqs.Arn

  Outputs:
    ApiGatewayRestApiId:
      Value: !Ref ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiId
    
    AppointmentsTableName:
      Value: !Ref AppointmentsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-AppointmentsTable
    
    AppointmentsTopicArn:
      Value: !Ref AppointmentsTopic
      Export:
        Name: ${self:service}-${self:provider.stage}-AppointmentsTopic